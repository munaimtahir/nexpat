name: ClinicQ CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install backend dependencies
      working-directory: ./apps/backend
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -U -r requirements-dev.txt # -U to upgrade if needed

    - name: Lint with Flake8 (Backend)
      working-directory: ./apps/backend
      run: flake8 .

    - name: Check formatting with Black (Backend)
      working-directory: ./apps/backend
      run: black --line-length 100 . --check --diff

    - name: Run backend tests (Pytest)
      working-directory: ./apps/backend
      # Assuming 'api' is the main app to target for coverage, adjust if needed
      run: python -m pytest --cov=api --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Install xmlstarlet for coverage check
      run: sudo apt-get update && sudo apt-get install -y xmlstarlet

    - name: Check backend coverage
      working-directory: ./apps/backend
      run: |
        COVERAGE_VALUE=$(xmlstarlet sel -t -v "concat(round(/coverage/@line-rate * 100), '')" coverage.xml)
        echo "Backend coverage is $COVERAGE_VALUE%"
        if [ "$COVERAGE_VALUE" -lt 80 ]; then
          echo "::error ::Backend coverage ${COVERAGE_VALUE}% is less than 80% threshold."
          exit 1
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      working-directory: ./apps/web
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Lint with ESLint (Frontend)
      working-directory: ./apps/web
      run: npm run lint

    - name: Run frontend tests (Jest)
      working-directory: ./apps/web
      # Use npx for cross-env if it's not globally available in CI runner
      run: npx cross-env NODE_ENV=test jest --runInBand --coverage --watchAll=false
      # Note: One frontend test is currently failing due to axios/MSW interaction issues.
      # Coverage threshold is set in jest.config.cjs and will cause failure if not met.

    - name: Build frontend application
      working-directory: ./apps/web
      run: npm run build

    - name: Archive frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/web/dist/ # Default Vite build output directory
        if-no-files-found: error # Fail if build output is missing
