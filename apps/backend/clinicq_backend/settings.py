"""
Django settings for clinicq_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

import dj_database_url
from django.core.exceptions import ImproperlyConfigured

# === Basics ==================================================================

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file if present
try:
    from dotenv import load_dotenv

    env_path = BASE_DIR / ".env"
    if env_path.exists():
        load_dotenv(dotenv_path=env_path)
except ImportError:
    # python-dotenv not installed, environment variables must be set externally
    pass

# === Security / Debug =========================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY", "django-insecure-@$43#sqi9t4_2&u38$v@l+3p37m&sp04afnk$usaf6f0z+2-*a"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() in ("true", "1", "yes", "on")

# Your server IP (set here as a sensible default; can be overridden by env)
_DEFAULT_ALLOWED_HOSTS = "localhost,127.0.0.1,172.235.33.181"
_raw_allowed_hosts = os.getenv("DJANGO_ALLOWED_HOSTS", _DEFAULT_ALLOWED_HOSTS)
ALLOWED_HOSTS: list[str] = [h.strip() for h in _raw_allowed_hosts.split(",") if h.strip()]

# === Applications =============================================================

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "api.apps.ApiConfig",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise middleware for serving static files in production
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # keep CORS early
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "clinicq_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "clinicq_backend.wsgi.application"

# === Database =================================================================

# DATABASE_URL expected in Docker; falls back to SQLite for local dev
_database_url = os.environ.get("DATABASE_URL")
if _database_url is None:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    sanitized_database_url = _database_url.strip()
    if not sanitized_database_url:
        raise ImproperlyConfigured("DATABASE_URL is set but empty.")
    try:
        DATABASES = {
            "default": dj_database_url.parse(
                sanitized_database_url,
                conn_max_age=600,
            )
        }
    except ValueError as exc:
        raise ImproperlyConfigured(
            f"DATABASE_URL is set but could not be parsed: {exc}."
        ) from exc

# === Password validation ======================================================

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# === Internationalization =====================================================

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# === Static files =============================================================

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS: list[Path] = [
    BASE_DIR / "server" / "static",  # Common static files
]

# Optionally serve built frontend (if present) as static
_frontend_dist = BASE_DIR.parent / "clinicq_frontend" / "dist"
if _frontend_dist.exists():
    STATICFILES_DIRS.append(_frontend_dist)

# Use WhiteNoise to serve static files in production (gzip + manifest)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# === Defaults ================================================================

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# === Cache (simple in-memory) ================================================

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "clinicq-cache",
    }
}

# === Logging =================================================================

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "fmt": "%(asctime)s %(levelname)s %(name)s %(message)s",
        },
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "json"},
    },
    "root": {"handlers": ["console"], "level": os.getenv("DJANGO_LOG_LEVEL", "INFO")},
}

# === DRF =====================================================================

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

# === CORS / CSRF =============================================================

# CORS: defaults include localhost (Vite) + your VPS IP (HTTP)
_default_cors = "http://localhost:5173,http://127.0.0.1:5173,http://172.235.33.181"
_cors_allowed_origins = os.getenv("CORS_ALLOWED_ORIGINS", _default_cors)
CORS_ALLOWED_ORIGINS = [o.strip() for o in _cors_allowed_origins.split(",") if o.strip()]

# Allow credentials (cookies, authorization headers) in CORS requests
CORS_ALLOW_CREDENTIALS = True

# Allow common headers used by the frontend
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# CSRF trusted origins must include scheme; defaults include your VPS IP
_default_csrf = "http://172.235.33.181,https://172.235.33.181"
_csrf_origins = os.getenv("CSRF_TRUSTED_ORIGINS", _default_csrf)
CSRF_TRUSTED_ORIGINS = [o.strip() for o in _csrf_origins.split(",") if o.strip()]

# === Security headers (toggle via env for production) ========================

SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "false").lower() in (
    "true",
    "1",
    "yes",
    "on",
)
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "0"))
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.getenv("SECURE_HSTS_INCLUDE_SUBDOMAINS", "false").lower() in (
    "true",
    "1",
    "yes",
    "on",
)
SECURE_HSTS_
