# Generated by Django 5.2.4 on 2025-10-04 23:20

import api.models
from django.db import migrations, models, transaction
from django.db.models import Q


def convert_registration_numbers_to_9_char_format(apps, schema_editor):
    """Convert existing xx-xx-xxx format to xxx-xx-xxx format"""
    Patient = apps.get_model("api", "Patient")
    Visit = apps.get_model("api", "Visit")
    db_alias = schema_editor.connection.alias

    connection = schema_editor.connection

    def format_value(raw_value: str) -> str:
        """Convert xx-xx-xxx (7 digits) to xxx-xx-xxx (8 digits)"""
        digits = "".join(ch for ch in str(raw_value) if ch.isdigit())
        if not digits:
            raise ValueError("Registration number must contain digits")

        # If already 8 digits, just reformat
        if len(digits) == 8:
            formatted = f"{int(digits):08d}"
            return f"{formatted[:3]}-{formatted[3:5]}-{formatted[5:]}"
        
        # If 7 digits (old format), convert to 8 digits by prepending 0
        number = int(digits)
        formatted = f"{number:08d}"  # Zero-pad to 8 digits
        return f"{formatted[:3]}-{formatted[3:5]}-{formatted[5:]}"

    patient_pks = list(
        Patient.objects.using(db_alias)
        .order_by("registration_number")
        .values_list("registration_number", flat=True)
    )

    with transaction.atomic(using=db_alias):
        with connection.constraint_checks_disabled():
            for old_value in patient_pks:

                try:
                    formatted_value = format_value(old_value)
                except ValueError:
                    # Skip rows that cannot be coerced
                    continue

                if str(old_value) == formatted_value:
                    continue

                Visit.objects.using(db_alias).filter(
                    Q(patient_id=old_value) | Q(patient_id=str(old_value))
                ).update(patient_id=formatted_value)

                Patient.objects.using(db_alias).filter(
                    Q(pk=old_value) | Q(pk=str(old_value))
                ).update(registration_number=formatted_value)

        connection.check_constraints()


def reverse_conversion(apps, schema_editor):
    """Convert xxx-xx-xxx format back to xx-xx-xxx format."""
    Patient = apps.get_model("api", "Patient")
    Visit = apps.get_model("api", "Visit")
    db_alias = schema_editor.connection.alias

    connection = schema_editor.connection

    def unformat_value(raw_value: str) -> str:
        """Convert xxx-xx-xxx (8 digits) back to xx-xx-xxx (7 digits)"""
        digits = "".join(ch for ch in str(raw_value) if ch.isdigit())
        if not digits:
            raise ValueError("Registration number must contain digits")
        
        # Convert 8 digits back to 7 digits by removing leading zero
        number = int(digits)
        formatted = f"{number:07d}"  # Zero-pad to 7 digits
        return f"{formatted[:2]}-{formatted[2:4]}-{formatted[4:]}"

    patient_pks = list(
        Patient.objects.using(db_alias)
        .order_by("registration_number")
        .values_list("registration_number", flat=True)
    )

    with transaction.atomic(using=db_alias):
        with connection.constraint_checks_disabled():
            for old_value in patient_pks:

                try:
                    integer_value = unformat_value(old_value)
                except ValueError:
                    continue

                if str(old_value) == integer_value:
                    continue

                Visit.objects.using(db_alias).filter(
                    Q(patient_id=old_value) | Q(patient_id=str(old_value))
                ).update(patient_id=integer_value)

                Patient.objects.using(db_alias).filter(
                    Q(pk=old_value) | Q(pk=str(old_value))
                ).update(registration_number=integer_value)

        connection.check_constraints()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0009_bootstrap_groups"),
    ]

    operations = [
        # Step 1: Change field to support 9 characters but without validators first
        migrations.AlterField(
            model_name="patient",
            name="registration_number",
            field=models.CharField(max_length=9, primary_key=True, serialize=False, unique=True),
        ),
        # Step 2: Convert existing data from xx-xx-xxx to xxx-xx-xxx format
        migrations.RunPython(
            convert_registration_numbers_to_9_char_format,
            reverse_conversion,
        ),
        # Step 3: Add the validators for the new format
        migrations.AlterField(
            model_name="patient",
            name="registration_number",
            field=models.CharField(
                max_length=9,
                primary_key=True,
                serialize=False,
                unique=True,
                validators=[api.models.validate_registration_number_format],
            ),
        ),
    ]
