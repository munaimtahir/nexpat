# Reviewed for final cleanup
# Generated by Django 5.2.4 on YYYY-MM-DD HH:MM
# (replace with actual timestamp if needed)

from django.db import migrations, transaction
from django.db.models import Q

DEFAULT_QUEUE_NAME = "General"
# Anonymous historical patients don't provide a phone number. Using ``None``
# avoids storing a bogus sentinel value that could be mistaken for a real
# number in future searches or reports.
ANONYMOUS_PATIENT_PHONE = None
ANONYMOUS_NAME_FALLBACK = "Anonymous Patient"
VISIT_BATCH_SIZE = 100

GENDER_ALIASES = {
    "M": "MALE",
    "MALE": "MALE",
    "MAN": "MALE",
    "F": "FEMALE",
    "FEMALE": "FEMALE",
    "W": "FEMALE",
    "WOMAN": "FEMALE",
    "FEM": "FEMALE",
    "O": "OTHER",
    "OTHER": "OTHER",
    "NB": "OTHER",
    "NONBINARY": "OTHER",
    "NON-BINARY": "OTHER",
    "NON BINARY": "OTHER",
}


def _normalise_gender(raw_value):
    """Map historical gender values to the canonical choices used by
    Visit/Patient."""

    if raw_value is None:
        return "OTHER"

    normalised = str(raw_value).strip().upper()
    if not normalised:
        return "OTHER"

    return GENDER_ALIASES.get(normalised, "OTHER")


def forwards_func(apps, schema_editor):
    """
    - Creates a default 'General' queue.
    - For each existing Visit:
        - Creates an 'anonymous' Patient record using the patient_name and
          patient_gender from the Visit. These patients will have a null
          phone number.
        - Associates the Visit with this new Patient and the default
          'General' queue.
    """
    Visit = apps.get_model("api", "Visit")
    Patient = apps.get_model("api", "Patient")
    Queue = apps.get_model("api", "Queue")
    db_alias = schema_editor.connection.alias

    # 1. Create the default 'General' queue
    general_queue, created = Queue.objects.using(db_alias).get_or_create(
        name=DEFAULT_QUEUE_NAME
    )
    if created:
        print(f"\nCreated default queue: '{DEFAULT_QUEUE_NAME}'")
    else:
        print(f"\nFound existing queue: '{DEFAULT_QUEUE_NAME}'")

    # 2. Migrate existing visits in small atomic batches so SQLite keeps
    # type coercion predictable. We only touch visits missing either patient
    # or queue references.
    visits_base_qs = (
        Visit.objects.using(db_alias)
        .filter(Q(patient_id__isnull=True) | Q(queue_id__isnull=True))
        .order_by("pk")
    )

    total_to_process = visits_base_qs.count()
    print(f"Found {total_to_process} visits to migrate.")

    migrated_count = 0
    while True:
        visit_ids = list(visits_base_qs.values_list("pk", flat=True)[:VISIT_BATCH_SIZE])
        if not visit_ids:
            break

        with transaction.atomic(using=db_alias):
            batch_visits = (
                Visit.objects.using(db_alias)
                .filter(pk__in=visit_ids)
                .select_for_update()
                .order_by("pk")
            )

            for visit in batch_visits:
                update_kwargs = {}

                gender = _normalise_gender(getattr(visit, "patient_gender", None))
                if hasattr(visit, "patient_gender") and visit.patient_gender != gender:
                    update_kwargs["patient_gender"] = gender

                if visit.patient_id is None:
                    name = (
                        getattr(visit, "patient_name", "") or ""
                    ).strip() or ANONYMOUS_NAME_FALLBACK
                    patient = Patient.objects.using(db_alias).create(
                        name=name,
                        gender=gender,
                        phone=ANONYMOUS_PATIENT_PHONE,
                    )
                    update_kwargs["patient_id"] = patient.pk

                if visit.queue_id is None:
                    update_kwargs["queue_id"] = general_queue.pk

                if update_kwargs:
                    Visit.objects.using(db_alias).filter(pk=visit.pk).update(
                        **update_kwargs
                    )
                    migrated_count += 1

    if migrated_count:
        print(
            f"Successfully migrated {migrated_count} visits to the "
            f"'{DEFAULT_QUEUE_NAME}' queue and linked them to patient "
            f"records."
        )
    else:
        print("No visits required migration.")


def backwards_func(apps, schema_editor):
    """
    Reverses the data migration.
    - Sets patient and queue fields on Visit back to NULL for visits
      associated with the 'General' queue and patients that might have
      been auto-created.
    - This is a destructive operation for the foreign key links but aims to
      revert the state as much as possible. Patient and Queue records created
      by the forward migration are not deleted here, as they might be used by
      other data. Schema migration 0002 would handle field removal if models
      are reverted.
    """
    Visit = apps.get_model("api", "Visit")
    Queue = apps.get_model("api", "Queue")
    db_alias = schema_editor.connection.alias

    try:
        general_queue = Queue.objects.using(db_alias).get(name=DEFAULT_QUEUE_NAME)
        visits_to_revert = Visit.objects.using(db_alias).filter(queue=general_queue)

        reverted_count = 0
        for visit in visits_to_revert:
            # We can't easily determine if the patient was auto-created by
            # this migration without adding more metadata. So, we'll just
            # nullify the links. The patient records themselves will remain.
            visit.patient = None
            visit.queue = None
            visit.save(using=db_alias)
            reverted_count += 1

        if reverted_count > 0:
            print(

                f"\nReverted {reverted_count} visits, setting their patient and queue to NULL."
            )
        else:
            print("\nNo visits found associated with the 'General' queue to revert.")

    except Queue.DoesNotExist:
        print(
            f"\nQueue '{DEFAULT_QUEUE_NAME}' not found. No visits to revert "
            f"based on this queue."
        )


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0002_queue_alter_visit_options_patient_visit_patient_and_more"),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
