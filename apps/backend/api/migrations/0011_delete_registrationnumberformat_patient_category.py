# Generated by Django 5.2.4 on 2025-10-05 13:40

from django.db import migrations, models
import datetime
import re


def convert_to_new_format(apps, schema_editor):
    """Convert existing registration numbers to mmyy-ct-0000 format."""
    Patient = apps.get_model("api", "Patient")
    Visit = apps.get_model("api", "Visit")
    
    # Track conversion mapping for updating visits
    conversion_map = {}
    
    # Get current month/year for conversion
    now = datetime.datetime.now()
    mmyy = f"{now.month:02d}{now.year % 100:02d}"
    
    # Process all existing patients
    patients = list(Patient.objects.all().order_by("registration_number"))
    
    for idx, patient in enumerate(patients, start=1):
        old_reg = patient.registration_number
        
        # Default category to "01" (Self-paying) for existing patients
        category = "01"
        
        # Generate new registration number: mmyy-ct-0000
        new_reg = f"{mmyy}-{category}-{idx:04d}"
        
        # Store mapping for later visit updates
        conversion_map[old_reg] = new_reg
    
    # Update patients with new registration numbers
    # We need to be careful about primary key constraints
    db_alias = schema_editor.connection.alias
    connection = schema_editor.connection
    
    with connection.constraint_checks_disabled():
        # First update all visits to point to temporary IDs
        for old_reg, new_reg in conversion_map.items():
            temp_id = f"TEMP_{new_reg}"
            Visit.objects.using(db_alias).filter(patient_id=old_reg).update(patient_id=temp_id)
        
        # Update patients to new registration numbers
        for idx, patient in enumerate(patients, start=1):
            old_reg = patient.registration_number
            new_reg = conversion_map[old_reg]
            Patient.objects.using(db_alias).filter(pk=old_reg).update(registration_number=new_reg)
        
        # Update visits to final registration numbers
        for old_reg, new_reg in conversion_map.items():
            temp_id = f"TEMP_{new_reg}"
            Visit.objects.using(db_alias).filter(patient_id=temp_id).update(patient_id=new_reg)


def reverse_conversion(apps, schema_editor):
    """Reverse migration is not supported as data would be lost."""
    # We cannot reliably reverse this migration
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0010_registrationnumberformat_and_expand_registration"),
    ]

    operations = [
        migrations.DeleteModel(
            name="RegistrationNumberFormat",
        ),
        migrations.AddField(
            model_name="patient",
            name="category",
            field=models.CharField(
                choices=[
                    ("01", "Self-paying"),
                    ("02", "Insurance"),
                    ("03", "Cash"),
                    ("04", "Free"),
                    ("05", "Poor"),
                ],
                default="01",
                max_length=2,
            ),
        ),
        migrations.RunPython(convert_to_new_format, reverse_conversion),
    ]
