# Reviewed for final cleanup
# Generated by Django 5.2.4 on YYYY-MM-DD HH:MM (replace with actual timestamp if needed)

from django.db import migrations

DEFAULT_QUEUE_NAME = "General"
# Anonymous historical patients don't provide a phone number.
# Using ``None`` avoids storing a bogus sentinel value that could
# be mistaken for a real number in future searches or reports.
ANONYMOUS_PATIENT_PHONE = None


def forwards_func(apps, schema_editor):
    """
    - Creates a default 'General' queue.
    - For each existing Visit:
        - Creates an 'anonymous' Patient record using the patient_name and patient_gender
          from the Visit. These patients will have a null phone number.
        - Associates the Visit with this new Patient and the default 'General' queue.
    """
    Visit = apps.get_model("api", "Visit")
    Patient = apps.get_model("api", "Patient")
    Queue = apps.get_model("api", "Queue")
    db_alias = schema_editor.connection.alias

    # 1. Create the default 'General' queue
    general_queue, created = Queue.objects.using(db_alias).get_or_create(
        name=DEFAULT_QUEUE_NAME
    )
    if created:
        print(f"\nCreated default queue: '{DEFAULT_QUEUE_NAME}'")
    else:
        print(f"\nFound existing queue: '{DEFAULT_QUEUE_NAME}'")

    # 2. Migrate existing visits
    visits_to_migrate = Visit.objects.using(db_alias).filter(patient__isnull=True)
    migrated_count = 0
    print(f"Found {visits_to_migrate.count()} visits to migrate.")

    for visit in visits_to_migrate:
        # Create an 'anonymous' patient for this visit.
        # We use get_or_create to avoid duplicate patients if multiple old visits
        # had the exact same name and gender.
        # However, for true anonymity per visit as implied by "anonymous patients",
        # it might be better to use Patient.objects.create() directly.
        # For this release, we'll assume patients with the same name and gender
        # from old visits could be the same person.
        anonymous_patient, patient_created = Patient.objects.using(
            db_alias
        ).get_or_create(
            name=visit.patient_name,
            gender=visit.patient_gender,
            # Leave phone unset for anonymous patients. A sentinel value might
            # pollute search results or imply a number where none exists.
            defaults={"phone": ANONYMOUS_PATIENT_PHONE},
        )
        if patient_created:
            print(
                f"  Created Patient: {anonymous_patient.name} (ID: {anonymous_patient.registration_number})"
            )

        visit.patient = anonymous_patient
        visit.queue = general_queue
        visit.save(using=db_alias)
        migrated_count += 1

    if migrated_count > 0:
        print(
            f"Successfully migrated {migrated_count} visits to the '{DEFAULT_QUEUE_NAME}' queue and linked them to patient records."
        )
    else:
        print("No visits required migration.")


def backwards_func(apps, schema_editor):
    """
    Reverses the data migration.
    - Sets patient and queue fields on Visit back to NULL for visits associated with
      the 'General' queue and patients that might have been auto-created.
    - This is a destructive operation for the foreign key links but aims to revert
      the state as much as possible. Patient and Queue records created by the forward
      migration are not deleted here, as they might be used by other data.
      Schema migration 0002 would handle field removal if models are reverted.
    """
    Visit = apps.get_model("api", "Visit")
    Queue = apps.get_model("api", "Queue")
    db_alias = schema_editor.connection.alias

    try:
        general_queue = Queue.objects.using(db_alias).get(name=DEFAULT_QUEUE_NAME)
        visits_to_revert = Visit.objects.using(db_alias).filter(queue=general_queue)

        reverted_count = 0
        for visit in visits_to_revert:
            # We can't easily determine if the patient was auto-created by this migration
            # without adding more metadata. So, we'll just nullify the links.
            # The patient records themselves will remain.
            visit.patient = None
            visit.queue = None
            visit.save(using=db_alias)
            reverted_count += 1

        if reverted_count > 0:
            print(
                f"\nReverted {reverted_count} visits, setting their patient and queue to NULL."
            )
        else:
            print("\nNo visits found associated with the 'General' queue to revert.")

    except Queue.DoesNotExist:
        print(
            f"\nQueue '{DEFAULT_QUEUE_NAME}' not found. No visits to revert based on this queue."
        )


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0002_queue_alter_visit_options_patient_visit_patient_and_more"),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
