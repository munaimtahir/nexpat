# Generated by Django 5.2.4 on 2025-09-25 17:23

import api.models
from django.db import migrations, models, transaction
from django.db.models import Q


def convert_registration_numbers_to_formatted(apps, schema_editor):
    """Convert existing integer registration numbers to xx-xx-xxx format"""
    Patient = apps.get_model("api", "Patient")
    Visit = apps.get_model("api", "Visit")
    db_alias = schema_editor.connection.alias

    connection = schema_editor.connection

    def format_value(raw_value: str) -> str:
        digits = "".join(ch for ch in str(raw_value) if ch.isdigit())
        if not digits:
            raise ValueError("Registration number must contain digits")

        number = int(digits)
        formatted = f"{number:07d}"
        return f"{formatted[:2]}-{formatted[2:4]}-{formatted[4:]}"

    patient_pks = list(
        Patient.objects.using(db_alias)
        .order_by("registration_number")
        .values_list("registration_number", flat=True)
    )

    with transaction.atomic(using=db_alias):
        with connection.constraint_checks_disabled():
            for old_value in patient_pks:

                try:
                    formatted_value = format_value(old_value)
                except ValueError:
                    # Skip rows that cannot be coerced; they will surface
                    # during validation once the validator is re-applied.
                    continue

                if str(old_value) == formatted_value:
                    continue

                Visit.objects.using(db_alias).filter(
                    Q(patient_id=old_value) | Q(patient_id=str(old_value))
                ).update(patient_id=formatted_value)

                Patient.objects.using(db_alias).filter(
                    Q(pk=old_value) | Q(pk=str(old_value))
                ).update(registration_number=formatted_value)

        connection.check_constraints()


def reverse_conversion(apps, schema_editor):
    """Convert formatted registration numbers back to integer strings."""
    Patient = apps.get_model("api", "Patient")
    Visit = apps.get_model("api", "Visit")
    db_alias = schema_editor.connection.alias

    connection = schema_editor.connection

    def unformat_value(raw_value: str) -> str:
        digits = "".join(ch for ch in str(raw_value) if ch.isdigit())
        if not digits:
            raise ValueError("Registration number must contain digits")
        return str(int(digits))

    patient_pks = list(
        Patient.objects.using(db_alias)
        .order_by("registration_number")
        .values_list("registration_number", flat=True)
    )

    with transaction.atomic(using=db_alias):
        with connection.constraint_checks_disabled():
            for old_value in patient_pks:

                try:
                    integer_value = unformat_value(old_value)
                except ValueError:
                    continue

                if str(old_value) == integer_value:
                    continue

                Visit.objects.using(db_alias).filter(
                    Q(patient_id=old_value) | Q(patient_id=str(old_value))
                ).update(patient_id=integer_value)

                Patient.objects.using(db_alias).filter(
                    Q(pk=old_value) | Q(pk=str(old_value))
                ).update(registration_number=integer_value)

        connection.check_constraints()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0007_auto_20250912_1117"),
    ]

    operations = [
        # Step 1: Change field to CharField but without validators first
        migrations.AlterField(
            model_name="patient",
            name="registration_number",
            field=models.CharField(
                max_length=8, primary_key=True, serialize=False, unique=True
            ),
        ),
        # Step 2: Convert existing data
        migrations.RunPython(
            convert_registration_numbers_to_formatted,
            reverse_conversion,
        ),
        # Step 3: Add the validators
        migrations.AlterField(
            model_name="patient",
            name="registration_number",
            field=models.CharField(
                max_length=8,
                primary_key=True,
                serialize=False,
                unique=True,
                validators=[api.models.validate_registration_number_format],
            ),
        ),
    ]
